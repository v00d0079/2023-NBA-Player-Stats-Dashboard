col_vals <- pow_co@data$MARGIN
pal <- colorNumeric(colors, domain = col_vals)
rounded_margin <- round(pow_co@data$MARGIN, 3)
highlight_colors <- c("#00008B", "white", "#8B0000")  # Darker shades of blue, white, and red for the highlight
highlight_pal <- colorNumeric(highlight_colors, domain = col_vals)
myLabels <- paste("Precinct Name:", pow_co@data$NAME,"<br/>",
"Donald Trump Votes:", pow_co@data$G20PRERTRU,"<br/>",
"Joe Biden Votes:", pow_co@data$G20PREDBID,"<br/>",
"Margin (Trump-Biden):", rounded_margin,"<br/>")
leaflet(pow_co) %>% addTiles()%>% addPolygons(fillColor = pal(col_vals),
label = lapply(myLabels, htmltools::HTML),weight = 1,
highlightOptions = highlightOptions(
weight = 4,
color = ~highlight_pal(col_vals), # Use the pal(col_vals) for fill color when highlighted
)) %>%
addLegend(pal = pal, values = col_vals,
title = "Margin (Trump-Biden)", position = "topright")
pow_co <- iowa[iowa$COUNTY %in% c("Poweshiek", "Jasper", "Polk"), ]
colors <- c("blue", "white", "red")
col_vals <- pow_co@data$MARGIN
pal <- colorNumeric(colors, domain = col_vals)
rounded_margin <- round(pow_co@data$MARGIN, 3)
myLabels <- paste("Precinct Name:", pow_co@data$NAME,"<br/>",
"Donald Trump Votes:", pow_co@data$G20PRERTRU,"<br/>",
"Joe Biden Votes:", pow_co@data$G20PREDBID,"<br/>",
"Margin (Trump-Biden):", rounded_margin,"<br/>")
leaflet(pow_co) %>% addTiles()%>% addPolygons(fillColor = pal(col_vals),
label = lapply(myLabels, htmltools::HTML),weight = 1,
highlightOptions = highlightOptions(
color = "black", # Color for the border
weight = 4, # Border weight when highlighted
layerId = ~NAME,
bringToFront = TRUE # Use the pal(col_vals) for fill color when highlighted
)) %>%
addLegend(pal = pal, values = col_vals,
title = "Margin (Trump-Biden)", position = "topright")
pow_co <- iowa[iowa$COUNTY %in% c("Poweshiek", "Jasper", "Polk"), ]
colors <- c("blue", "white", "red")
col_vals <- pow_co@data$MARGIN
pal <- colorNumeric(colors, domain = col_vals)
rounded_margin <- round(pow_co@data$MARGIN, 3)
myLabels <- paste("Precinct Name:", pow_co@data$NAME,"<br/>",
"Donald Trump Votes:", pow_co@data$G20PRERTRU,"<br/>",
"Joe Biden Votes:", pow_co@data$G20PREDBID,"<br/>",
"Margin (Trump-Biden):", rounded_margin,"<br/>")
leaflet(pow_co) %>% addTiles()%>% addPolygons(fillColor = pal(col_vals),
label = lapply(myLabels, htmltools::HTML),weight = 1,
highlightOptions = highlightOptions(
color = "black", # Color for the border
weight = 4, # Border weight when highlighted
bringToFront = TRUE # Use the pal(col_vals) for fill color when highlighted
)) %>%
addLegend(pal = pal, values = col_vals,
title = "Margin (Trump-Biden)", position = "topright")
pow_co <- iowa[iowa$COUNTY %in% c("Poweshiek", "Jasper", "Polk"), ]
colors <- c("blue", "white", "red")
col_vals <- pow_co@data$MARGIN
pal <- colorNumeric(colors, domain = col_vals)
rounded_margin <- round(pow_co@data$MARGIN, 3)
highlight_colors <- c("#00008B", "white", "#8B0000")  # Darker shades of blue, white, and red for the highlight
highlight_pal <- colorNumeric(highlight_colors, domain = col_vals)
myLabels <- paste("Precinct Name:", pow_co@data$NAME,"<br/>",
"Donald Trump Votes:", pow_co@data$G20PRERTRU,"<br/>",
"Joe Biden Votes:", pow_co@data$G20PREDBID,"<br/>",
"Margin (Trump-Biden):", rounded_margin,"<br/>")
leaflet(pow_co) %>% addTiles()%>% addPolygons(fillColor = pal(col_vals),
label = lapply(myLabels, htmltools::HTML),weight = 1,
highlightOptions = highlightOptions(
fill = ~highlight_pal(col_vals), # Color for the border
bringToFront = TRUE # Use the pal(col_vals) for fill color when highlighted
)) %>%
addLegend(pal = pal, values = col_vals,
title = "Margin (Trump-Biden)", position = "topright")
pow_co <- iowa[iowa$COUNTY %in% c("Poweshiek", "Jasper", "Polk"), ]
colors <- c("blue", "white", "red")
col_vals <- pow_co@data$MARGIN
pal <- colorNumeric(colors, domain = col_vals)
rounded_margin <- round(pow_co@data$MARGIN, 3)
highlight_colors <- c("#00008B", "white", "#8B0000")  # Darker shades of blue, white, and red for the highlight
highlight_pal <- colorNumeric(highlight_colors, domain = col_vals)
myLabels <- paste("Precinct Name:", pow_co@data$NAME,"<br/>",
"Donald Trump Votes:", pow_co@data$G20PRERTRU,"<br/>",
"Joe Biden Votes:", pow_co@data$G20PREDBID,"<br/>",
"Margin (Trump-Biden):", rounded_margin,"<br/>")
leaflet(pow_co) %>% addTiles()%>% addPolygons(fillColor = pal(col_vals),
label = lapply(myLabels, htmltools::HTML),weight = 1,
highlightOptions = highlightOptions(
fill = ~highlight_pal(col_vals), # Use highlight_pal for fill color when highlighted
color = 'transparent', # Set the border color to transparent
weight = 4, # Border weight when highlighted
bringToFront = TRUE
)) %>%
addLegend(pal = pal, values = col_vals,
title = "Margin (Trump-Biden)", position = "topright")
pow_co <- iowa[iowa$COUNTY %in% c("Poweshiek", "Jasper", "Polk"), ]
colors <- c("#00008B", "white", "#8B0000")
col_vals <- pow_co@data$MARGIN
pal <- colorNumeric(colors, domain = col_vals)
rounded_margin <- round(pow_co@data$MARGIN, 3)
highlight_colors <- c("#00008B", "white", "#8B0000")  # Darker shades of blue, white, and red for the highlight
highlight_pal <- colorNumeric(highlight_colors, domain = col_vals)
myLabels <- paste("Precinct Name:", pow_co@data$NAME,"<br/>",
"Donald Trump Votes:", pow_co@data$G20PRERTRU,"<br/>",
"Joe Biden Votes:", pow_co@data$G20PREDBID,"<br/>",
"Margin (Trump-Biden):", rounded_margin,"<br/>")
leaflet(pow_co) %>% addTiles()%>% addPolygons(fillColor = pal(col_vals),
label = lapply(myLabels, htmltools::HTML),weight = 1,
highlightOptions = highlightOptions(
fill = ~highlight_pal(col_vals), # Use highlight_pal for fill color when highlighted
color = 'transparent', # Set the border color to transparent
weight = 4, # Border weight when highlighted
bringToFront = TRUE
)) %>%
addLegend(pal = pal, values = col_vals,
title = "Margin (Trump-Biden)", position = "topright")
library(leaflet)
library(scales)
pow_co <- iowa[iowa$COUNTY %in% c("Poweshiek", "Jasper", "Polk"), ]
colors <- c("blue", "white", "red")
col_vals <- pow_co@data$MARGIN
rounded_margin <- round(col_vals, 3)
# Create a custom color palette based on the range of col_vals
custom_color_palette <- scale_color_gradient(low = "red", high = "blue")(col_vals)
library(leaflet)
# Sample data
pow_co <- iowa[iowa$COUNTY %in% c("Poweshiek", "Jasper", "Polk"), ]
col_vals <- pow_co@data$MARGIN
# Create a custom color palette based on the range of col_vals
custom_color_palette <- colorRampPalette(c("red", "white", "blue"))(length(unique(col_vals)))
# Function to map values to colors
map_to_color <- function(value) {
if (value <= min(col_vals)) {
return(custom_color_palette[1])
} else if (value >= max(col_vals)) {
return(custom_color_palette[length(custom_color_palette)])
} else {
# Map values to color based on their position in the range
position <- (value - min(col_vals)) / (max(col_vals) - min(col_vals))
index <- round(position * (length(custom_color_palette) - 1)) + 1
return(custom_color_palette[index])
}
}
# Apply the custom color mapping to col_vals
mapped_colors <- sapply(col_vals, map_to_color)
# Leaflet map
leaflet(pow_co) %>%
addTiles() %>%
addPolygons(
fillColor = mapped_colors,
label = ~paste("Precinct Name:", NAME, "<br/>",
"Donald Trump Votes:", G20PRERTRU, "<br/>",
"Joe Biden Votes:", G20PREDBID, "<br/>",
"Margin (Trump-Biden):", round(MARGIN, 3), "<br/>"),
weight = 1,
highlightOptions = highlightOptions(
color = "black",
weight = 4,
layerId = ~NAME,
bringToFront = TRUE
)
) %>%
addLegend(pal = custom_color_palette, values = col_vals, title = "Margin (Trump-Biden)", position = "topright")
library(leaflet)
# Sample data
pow_co <- iowa[iowa$COUNTY %in% c("Poweshiek", "Jasper", "Polk"), ]
col_vals <- pow_co@data$MARGIN
# Create a custom color palette based on the range of col_vals
custom_color_palette <- colorRampPalette(c("red", "white", "blue"))(length(unique(col_vals)))
# Function to map values to colors
map_to_color <- function(value) {
if (value <= min(col_vals)) {
return(custom_color_palette[1])
} else if (value >= max(col_vals)) {
return(custom_color_palette[length(custom_color_palette)])
} else {
# Map values to color based on their position in the range
position <- (value - min(col_vals)) / (max(col_vals) - min(col_vals))
index <- round(position * (length(custom_color_palette) - 1)) + 1
return(custom_color_palette[index])
}
}
# Apply the custom color mapping to col_vals
mapped_colors <- sapply(col_vals, map_to_color)
# Leaflet map
leaflet(pow_co) %>%
addTiles() %>%
addPolygons(
fillColor = mapped_colors,
label = ~paste("Precinct Name:", pow_co@data$NAME, "<br/>",
"Donald Trump Votes:", pow_co@data$G20PRERTRU, "<br/>",
"Joe Biden Votes:", pow_co@data$G20PREDBID, "<br/>",
"Margin (Trump-Biden):", round(pow_co@data$MARGIN, 3), "<br/>"),
weight = 1,
highlightOptions = highlightOptions(
color = "black",
weight = 4,
layerId = ~NAME,
bringToFront = TRUE
)
) %>%
addLegend(pal = custom_color_palette, values = col_vals, title = "Margin (Trump-Biden)", position = "topright")
pow_co <- iowa[iowa$COUNTY %in% c("Poweshiek", "Jasper", "Polk"), ]
colors <- c("#00008B", "white", "#8B0000")
col_vals <- pow_co@data$MARGIN
pal <- colorNumeric(colors, domain = col_vals)
rounded_margin <- round(pow_co@data$MARGIN, 3)
highlight_colors <- c("#00008B", "white", "#8B0000")  # Darker shades of blue, white, and red for the highlight
highlight_pal <- colorNumeric(highlight_colors, domain = col_vals)
myLabels <- paste("Precinct Name:", pow_co@data$NAME,"<br/>",
"Donald Trump Votes:", pow_co@data$G20PRERTRU,"<br/>",
"Joe Biden Votes:", pow_co@data$G20PREDBID,"<br/>",
"Margin (Trump-Biden):", rounded_margin,"<br/>")
leaflet(pow_co) %>% addTiles()%>% addPolygons(fillColor = pal(col_vals),
label = lapply(myLabels, htmltools::HTML),weight = 1,
highlightOptions = highlightOptions(
fill = ~highlight_pal(col_vals), # Use highlight_pal for fill color when highlighted
color = 'transparent', # Set the border color to transparent
weight = 4, # Border weight when highlighted
bringToFront = TRUE
)) %>%
addLegend(pal = pal, values = col_vals,
title = "Margin (Trump-Biden)", position = "topright")
library(shiny); runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
View(Selection)
View(selection)
Nba_player_data <- read.csv("C:/Users/sniss/OneDrive/Desktop/NBAStats2023/2023_nba_player_stats.csv")
selection<- Nba_player_data %>%select('Player','POS','Team','Age','PTS','FGM','FGA','FG.','X3PM','X3PA','X3P.','FT.','REB','AST','TOV', 'STL','DD2','TD3','X...')
selection$Eff<-(selection$FG.+selection$X3P.)/2
selection<-selection[selection$POS!="N/A",]
#Next create a radar of picking players will look at sankey code for that.
playerinput<-selection$Player
player_selected <- head(playerinput, 5)
ageinput<-unique(selection$Age)
age_selected <- head(ageinput, 5)
teaminput<-unique(selection$Team)
team_selected <- head(teaminput, 5)
posinput<-unique(selection$POS)
pos_selected<-head(posinput,3)
View(selected)
View(selection)
View(Nba_player_data)
runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
Nba_player_data <- read.csv("C:/Users/sniss/OneDrive/Desktop/NBAStats2023/2023_nba_player_stats.csv")
selection<- Nba_player_data %>%select('Player','POS','Team','Age','GP','Min','PTS','FGM','FGA','FG.','X3PM','X3PA','X3P.','FT.','REB','AST','TOV', 'STL','DD2','TD3','X...')
selection$Eff<-(selection$FG.+selection$X3P.)/2
selection$minpergame<-selection$Min/selection$GP
selection<-selection[selection$POS!="N/A",]
#Next create a radar of picking players will look at sankey code for that.
playerinput<-selection$Player
player_selected <- head(playerinput, 5)
ageinput<-unique(selection$Age)
age_selected <- head(ageinput, 5)
teaminput<-unique(selection$Team)
team_selected <- head(teaminput, 5)
posinput<-unique(selection$POS)
pos_selected<-head(posinput,3)
View(selection)
runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
Nba_player_data <- read.csv("C:/Users/sniss/OneDrive/Desktop/NBAStats2023/2023_nba_player_stats.csv")
selection<- Nba_player_data %>%select('Player','POS','Team','Age','GP','Min','PTS','FGM','FGA','FG.','X3PM','X3PA','X3P.','FT.','REB','AST','TOV', 'STL','DD2','TD3','X...')
selection$Eff<-(selection$FG.+selection$X3P.)/2
selection$MPG<-selection$Min/selection$GP
View(selection)
selection$MPG<-round(selection$Min/selection$GP,2)
View(selection)
selection$MPG<-round(selection$Min/selection$GP,0)
View(selection)
selection$MPG<-round(selection$Min/selection$GP,2)
View(selection)
runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
Nba_player_data <- read.csv("C:/Users/sniss/OneDrive/Desktop/NBAStats2023/2023_nba_player_stats.csv")
selection<- Nba_player_data %>%select('Player','POS','Team','Age','GP','Min','PTS','FGM','FGA','FG.','X3PM','X3PA','X3P.','FT.','REB','AST','TOV', 'STL','DD2','TD3','X...')
selection$Eff<-(selection$FG.+selection$X3P.)/2
selection$PPG<-round(selection$PTS/selection$GP,2)
selection$MPG<-round(selection$Min/selection$GP,2)
runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(ggplot2)
library(dplyr)
colleges <- read.csv("https://remiller1450.github.io/data/Colleges2019.csv")
ui <- fluidPage(
fluidRow(
column(2, wellPanel(numericInput(inputId = 'n', label = 'Number of obs:', value = 100))),
column(8, sliderInput(inputId = 'bins', label = "Number of bins:", min = 2, max = 20, value = 10)),
column(8,plotOutput('plot'))
),
)
## Set up the server function
server <- function(input, output){
output$plot <- renderPlot({
ggplot() + geom_histogram(aes(x = rnorm(input$n)), bins = input$bins)
})
}
## Build and run the
shinyApp(ui, server)
State_input <- unique(colleges$State)
State_selected <- head(State_input, 5)
ui <- fluidPage(
sidebarLayout(position = "left",
sidebarPanel(
selectInput(inputId = "Numeric_Variable", label = "Choose your numeric variable:",
choices = c("Enrolled Students" = "Enrollment",
"Median ACT score" = "ACT_median",
"Average Faculty Salary"="Avg_Fac_Salary",
"Admission Rate"="Adm_Rate",
"Median Debt"="Debt_median",
"Percent Black"="PercentBlack")),
selectizeInput(
'State_inputs',
label = 'Select States:',
choices = State_input,
multiple = TRUE,
selected = State_selected)),
mainPanel(
plotOutput('plot')
)
)
)
## Set up the server function
server <- function(input, output){
output$plot <- renderPlot({
ggplot(data =  filter(colleges, State %in% input$State_inputs), aes_string(x=input$Numeric_Variable,y = "Salary10yr_median")) + geom_point()  ## notice the use of aes_string
})
}
## Build and run
shinyApp(ui, server)
runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
View(colleges <- read.csv("https://remiller1450.github.io/data/Colleges2019.csv"))
runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
State_input <- unique(colleges$State)
State_selected <- head(State_input, 5)
ui <- fluidPage(
sidebarLayout(position = "left",
sidebarPanel(
selectInput(inputId = "Numeric_Variable", label = "Choose your numeric variable:",
choices = c("Enrolled Students" = "Enrollment",
"Median ACT score" = "ACT_median",
"Average Faculty Salary"="Avg_Fac_Salary",
"Admission Rate"="Adm_Rate",
"Median Debt"="Debt_median",
"Percent Black"="PercentBlack")),
selectizeInput(
'State_inputs',
label = 'Select States:',
choices = State_input,
multiple = TRUE,
selected = State_selected)),
mainPanel(
plotOutput('plot')
)
)
)
## Set up the server function
server <- function(input, output){
output$plot <- renderPlot({
ggplot(data =  filter(colleges, State %in% input$State_inputs), aes_string(x=input$Numeric_Variable,y = "Salary10yr_median")) + geom_point()  ## notice the use of aes_string
})
}
## Build and run
shinyApp(ui, server)
runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
View(selection%>%mutate(medAGE = median(Age)))
runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
selection$ALLPTS<-sum(selection,PTS)
selection$ALLPTS<-sum(selection$PTS,na.rm = TRUE)
View(selection)
selection$ALLPTS<-sum(selection$PTS,na.rm = TRUE)
selection$PercPTS<-selection$ALLPTS/selection$PTS
View(selection)
selection$PercPTS<-selection$PTS/selection$ALLPTS
View(selection)
selection$ALLPTS<-sum(selection$PTS,na.rm = TRUE)
selection$PercPTS<-round(selection$PTS/selection$ALLPTS,5)
View(selection)
selection$ALLPTS<-sum(selection$PTS,na.rm = TRUE)
selection$PercPTS<-round(selection$PTS/selection$ALLPTS,5)*100
View(selection)
pie(selection$PercPTS)
pie(head(selection$PercPTS,50))
pie(head(selection$PercPTS,10))
ggplot(selection, aes(x="", y=PercPts, fill=group)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
ggplot(selection, aes(x="", y=PercPTS, fill=group)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
ggplot(head(selection,30), aes(x="", y=PercPTS, fill=Player)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
ggplot(head(selection,10), aes(x="", y=PercPTS, fill=Player)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
selection <- selection %>%
arrange(desc(PTS)) %>%
mutate(prop = PTS / sum(data$PTS) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
selection <- selection %>%
arrange(desc(PTS)) %>%
mutate(prop = PTS / sum(selection$PTS) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop )
ggplot(data, aes(x="", y=prop, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="none") +
geom_text(aes(y = ypos, label = group), color = "white", size=6) +
scale_fill_brewer(palette="Set1")
ggplot(selection, aes(x="", y=prop, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="none") +
geom_text(aes(y = ypos, label = group), color = "white", size=6) +
scale_fill_brewer(palette="Set1")
ggplot(selection, aes(x="", y=prop, fill=Player)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="none") +
geom_text(aes(y = ypos, label = group), color = "white", size=6) +
scale_fill_brewer(palette="Set1")
ggplot(selection, aes(x="", y=prop, fill=Player)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="none") +
geom_text(aes(y = ypos, label = Player), color = "white", size=6) +
scale_fill_brewer(palette="Set1")
ggplot(head(selection,20), aes(x="", y=prop, fill=Player)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="none") +
geom_text(aes(y = ypos, label = Player), color = "white", size=6) +
scale_fill_brewer(palette="Set1")
ggplot(head(selection,20), aes(x="", y=prop, fill=Player)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="none") +
geom_text(aes(y = ypos, label = Player), color = "white", size=6)
View(selection <- selection %>%
arrange(desc(PTS)) %>%
mutate(prop = PTS / sum(selection$PTS) *100) %>%
mutate(ypos = cumsum(prop)- 0.5*prop ))
ggplot(head(selection,10), aes(x="", y=prop, fill=Player)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="none") +
geom_text(aes(y = ypos, label = Player), color = "white", size=6)
ggplot(head(selection,10), aes(x="", y=prop, fill=Player)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="none")
ggplot(head(selection,50), aes(x="", y=prop, fill=Player)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void() +
theme(legend.position="none")
ggplot(head(selection,50), aes(x="", y=prop, fill=Player)) +
geom_bar(stat="identity", width=1, color="white") +
theme_void() +
theme(legend.position="none")
selection <- selection %>%
arrange(desc(PTS)) %>%
ggplot(head(selection,25), aes(x = Player, y = PTS)) +
geom_bar(stat = "identity")
ggplot(selection, aes(x = Player, y = PTS)) +
geom_bar(stat = "identity")
ggplot(head(selection,50), aes(x = Player, y = PTS)) +
geom_bar(stat = "identity")
ggplot(head(selection,25), aes(x = Player, y = PTS)) +
geom_bar(stat = "identity")
ggplot(head(selection,25), aes(x = Player, y = PTS)) +
geom_bar(stat = "identity")+theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(head(selection,25), aes(x = Player, y = PTS)) +
geom_bar(stat = "identity")+theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
ggplot(head(selection,25), aes(x = Player, y = PTS)) +
geom_bar(stat = "identity")+theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(head(selection,50), aes(x = Player, y = PTS)) +
geom_bar(stat = "identity")+theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(head(selection %>%
arrange(desc(PTS)) %>%,50), aes(x = Player, y = PTS)) +
ggplot(head(selection %>%
arrange(desc(PTS)),50), aes(x = Player, y = PTS)) +
geom_bar(stat = "identity")+theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(head(selection %>%
arrange(desc(PTS)),50), aes(x = reorder(Player, -PTS), y = PTS)) +
geom_bar(stat = "identity")+theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
library(shiny); runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
curve_data <- data.frame(
x = seq(min(input$Eff), max(input$Eff), length = 100)
)
runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
library(shiny); runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
runApp('C:/Users/sniss/OneDrive/Desktop/Hist 261/NBA_stats2023-main/main.R')
